/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4p2NHB7HnAYV45yx1ZgrVt
// Component: zjrZLDRsbEfRQV
import * as React from "react";
import {
  hasVariant,
  createPlasmicElement,
  RenderOpts,
  Override,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger
} from "@plasmicapp/react-web";
import ToggleButton from "../../ToggleButton"; // plasmic-import: GYBhl6_6fdZANy/component

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_todo_mvc_for_tutorial_work.css"; // plasmic-import: 4p2NHB7HnAYV45yx1ZgrVt/projectcss
import "./PlasmicFooter.css"; // plasmic-import: zjrZLDRsbEfRQV/css

export type PlasmicFooter__VariantsArgs = {
  state?: MultiChoiceArg<"hasCompleted" | "singularLeft" | "empty">;
};

export const PlasmicFooter__VariantProps: (keyof PlasmicFooter__VariantsArgs)[] = [
  "state"
];

export type PlasmicFooter__ArgsType = {
  count?: React.ReactNode;
};

export const PlasmicFooter__ArgProps: (keyof PlasmicFooter__ArgsType)[] = [
  "count"
];

export interface DefaultFooterProps {
  count?: React.ReactNode;
  state?: MultiChoiceArg<"hasCompleted" | "singularLeft" | "empty">;
  className?: string;
}

const PlasmicFooter__RenderFuncs = {
  footerContainer: (
    opts: RenderOpts<
      PlasmicFooter__VariantsArgs,
      PlasmicFooter__ArgsType,
      {
        footerContainer?: Flex<"div">;
        allToggle?: Flex<typeof ToggleButton>;
        completedToggle?: Flex<typeof ToggleButton>;
        activeToggle?: Flex<typeof ToggleButton>;
        clearBtn?: Flex<"div">;
      }
    >
  ): React.ReactElement | null => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <div
        data-plasmic-override={overrides.footerContainer}
        className={classNames({
          Footer__footerContainer__2_IFS: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        {(
          hasVariant(variants, "state", "empty")
            ? false
            : hasVariant(variants, "state", "singularLeft")
            ? true
            : hasVariant(variants, "state", "hasCompleted")
            ? true
            : true
        ) ? (
          <div
            className={classNames({
              "Footer__box--empty__84FFtvjgQs": hasVariant(
                variants,
                "state",
                "empty"
              ),

              "Footer__box--hasCompleted__84FFt0IFua": hasVariant(
                variants,
                "state",
                "hasCompleted"
              ),

              "Footer__box--singularLeft__84FFt8kBMw": hasVariant(
                variants,
                "state",
                "singularLeft"
              ),

              Footer__box__84FFt: true,
              "plasmic-default__all": true,
              "plasmic-default__div": true
            })}
          >
            {PlasmicFooter__RenderFuncs.slotCount({
              variants,
              args,
              overrides
            })}

            {(hasVariant(variants, "state", "singularLeft") ? true : true) ? (
              <div
                className={classNames({
                  "Footer__box--empty__GxcQFvjgQs": hasVariant(
                    variants,
                    "state",
                    "empty"
                  ),

                  "Footer__box--hasCompleted__GxcQF0IFua": hasVariant(
                    variants,
                    "state",
                    "hasCompleted"
                  ),

                  "Footer__box--singularLeft__GxcQF8kBMw": hasVariant(
                    variants,
                    "state",
                    "singularLeft"
                  ),

                  Footer__box__GxcQF: true,
                  "plasmic-default__all": true,
                  "plasmic-default__div": true
                })}
              >
                {hasVariant(variants, "state", "singularLeft")
                  ? " item left"
                  : " items left"}
              </div>
            ) : null}
          </div>
        ) : null}

        <div
          data-plasmic-wrap-flex-child={true}
          className={classNames({
            Footer__box__urP13: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        >
          {PlasmicFooter__RenderFuncs.allToggle({
            variants,
            args,
            overrides
          })}

          {PlasmicFooter__RenderFuncs.completedToggle({
            variants,
            args,
            overrides
          })}

          {PlasmicFooter__RenderFuncs.activeToggle({
            variants,
            args,
            overrides
          })}
        </div>

        {PlasmicFooter__RenderFuncs.clearBtn({
          variants,
          args,
          overrides
        })}
      </div>
    );
  },
  slotCount: (
    opts: RenderOpts<PlasmicFooter__VariantsArgs, PlasmicFooter__ArgsType, {}>
  ): React.ReactElement | null => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <PlasmicSlot
        defaultContents={"2"}
        value={args.count}
        className={classNames({
          "Footer__slotCount--hasCompleted__Pkzac0IFua": hasVariant(
            variants,
            "state",
            "hasCompleted"
          ),

          "Footer__slotCount--singularLeft__Pkzac8kBMw": hasVariant(
            variants,
            "state",
            "singularLeft"
          ),

          Footer__slotCount__Pkzac: true
        })}
      />
    );
  },
  allToggle: (
    opts: RenderOpts<
      PlasmicFooter__VariantsArgs,
      PlasmicFooter__ArgsType,
      {
        allToggle?: Flex<typeof ToggleButton>;
      }
    >
  ): React.ReactElement | null => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <ToggleButton
        data-plasmic-override={overrides.allToggle}
        className={classNames({
          Footer__allToggle__hJdvt: true,
          __wab_instance: true
        })}
        state={"selected" as const}
        {...({} as any)}
      >
        {"All"}
      </ToggleButton>
    );
  },
  completedToggle: (
    opts: RenderOpts<
      PlasmicFooter__VariantsArgs,
      PlasmicFooter__ArgsType,
      {
        completedToggle?: Flex<typeof ToggleButton>;
      }
    >
  ): React.ReactElement | null => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <ToggleButton
        data-plasmic-override={overrides.completedToggle}
        className={classNames({
          Footer__completedToggle__M4f5r: true,
          __wab_instance: true
        })}
        {...({} as any)}
      >
        {"Completed"}
      </ToggleButton>
    );
  },
  activeToggle: (
    opts: RenderOpts<
      PlasmicFooter__VariantsArgs,
      PlasmicFooter__ArgsType,
      {
        activeToggle?: Flex<typeof ToggleButton>;
      }
    >
  ): React.ReactElement | null => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <ToggleButton
        data-plasmic-override={overrides.activeToggle}
        className={classNames({
          "Footer__activeToggle--hasCompleted__gYrQ-0IFua": hasVariant(
            variants,
            "state",
            "hasCompleted"
          ),

          "Footer__activeToggle__gYrQ-": true,
          __wab_instance: true
        })}
        {...({} as any)}
      >
        {"Active"}
      </ToggleButton>
    );
  },
  clearBtn: (
    opts: RenderOpts<
      PlasmicFooter__VariantsArgs,
      PlasmicFooter__ArgsType,
      {
        clearBtn?: Flex<"div">;
      }
    >
  ): React.ReactElement | null => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (hasVariant(variants, "state", "hasCompleted") ? true : false) ? (
      <div
        data-plasmic-override={overrides.clearBtn}
        className={classNames({
          "Footer__clearBtn--hasCompleted__qWD_u0IFua": hasVariant(
            variants,
            "state",
            "hasCompleted"
          ),

          Footer__clearBtn__qWD_u: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        {"Clear completed"}
      </div>
    ) : null;
  }
};

const PlasmicFooter__FCs = {
  footerContainer: undefined,
  slotCount: undefined,
  allToggle: undefined,
  completedToggle: undefined,
  activeToggle: undefined,
  clearBtn: undefined
};

class PlasmicFooter__Renderer extends Renderer<
  PlasmicFooter__VariantsArgs,
  PlasmicFooter__ArgsType,
  typeof PlasmicFooter__RenderFuncs,
  "footerContainer"
> {
  constructor(
    variants: PlasmicFooter__VariantsArgs,
    args: PlasmicFooter__ArgsType
  ) {
    super(variants, args, PlasmicFooter__RenderFuncs, "footerContainer");
  }

  protected create(
    variants: PlasmicFooter__VariantsArgs,
    args: PlasmicFooter__ArgsType
  ) {
    return new PlasmicFooter__Renderer(variants, args);
  }

  getInternalVariantProps(): (keyof PlasmicFooter__VariantsArgs)[] {
    return PlasmicFooter__VariantProps;
  }

  getInternalArgProps(): (keyof PlasmicFooter__ArgsType)[] {
    return PlasmicFooter__ArgProps;
  }

  forNode(
    name: "footerContainer"
  ): NodeRenderer<typeof PlasmicFooter__RenderFuncs["footerContainer"]>;
  forNode(
    name: "slotCount"
  ): NodeRenderer<typeof PlasmicFooter__RenderFuncs["slotCount"]>;
  forNode(
    name: "allToggle"
  ): NodeRenderer<typeof PlasmicFooter__RenderFuncs["allToggle"]>;
  forNode(
    name: "completedToggle"
  ): NodeRenderer<typeof PlasmicFooter__RenderFuncs["completedToggle"]>;
  forNode(
    name: "activeToggle"
  ): NodeRenderer<typeof PlasmicFooter__RenderFuncs["activeToggle"]>;
  forNode(
    name: "clearBtn"
  ): NodeRenderer<typeof PlasmicFooter__RenderFuncs["clearBtn"]>;
  forNode(name: keyof typeof PlasmicFooter__RenderFuncs) {
    return super.forNode(name);
  }
}

type PlasmicFooterFooterContainerProps = PlasmicFooter__VariantsArgs &
  PlasmicFooter__ArgsType & {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: {
      footerContainer?: Flex<"div">;
      allToggle?: Flex<typeof ToggleButton>;
      completedToggle?: Flex<typeof ToggleButton>;
      activeToggle?: Flex<typeof ToggleButton>;
      clearBtn?: Flex<"div">;
    };

    footerContainer?: Flex<"div">;
    allToggle?: Flex<typeof ToggleButton>;
    completedToggle?: Flex<typeof ToggleButton>;
    activeToggle?: Flex<typeof ToggleButton>;
    clearBtn?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicFooter__VariantsArgs
    | keyof PlasmicFooter__ArgsType
    | "variants"
    | "args"
    | "footerContainer"
    | "allToggle"
    | "completedToggle"
    | "activeToggle"
    | "clearBtn"
  >;

export const PlasmicFooter = ((props: PlasmicFooterFooterContainerProps) => {
  const renderer = new PlasmicFooter__Renderer({}, {});
  const descendantNames = [
    "footerContainer",
    "allToggle",
    "completedToggle",
    "activeToggle",
    "clearBtn"
  ] as const;
  const leftoverProps = omit(
    props,
    "variants",
    "args",
    "overrides",
    ...descendantNames,
    ...renderer.getInternalVariantProps(),
    ...renderer.getInternalArgProps()
  ) as Partial<React.ComponentProps<"div">>;

  let nodeRenderer = renderer
    .forNode("footerContainer")
    .withVariants(pick(props, ...renderer.getInternalVariantProps()))
    .withVariants(props.variants || {})
    .withArgs(pick(props, ...renderer.getInternalArgProps()))
    .withArgs(props.args || {})
    .withOverrides(pick(props, ...descendantNames))
    .withOverrides(props.overrides || {});

  if (Object.keys(leftoverProps).length > 0) {
    nodeRenderer = nodeRenderer.withOverrides({
      footerContainer: {
        props: leftoverProps
      }
    });
  }

  return nodeRenderer.render();
}) as React.FunctionComponent<PlasmicFooterFooterContainerProps> & {
  allToggle: React.FunctionComponent<PlasmicFooterAllToggleProps>;
  completedToggle: React.FunctionComponent<PlasmicFooterCompletedToggleProps>;
  activeToggle: React.FunctionComponent<PlasmicFooterActiveToggleProps>;
  clearBtn: React.FunctionComponent<PlasmicFooterClearBtnProps>;
  createRenderer: () => PlasmicFooter__Renderer;
};

type PlasmicFooterAllToggleProps = PlasmicFooter__VariantsArgs &
  PlasmicFooter__ArgsType & {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: {
      allToggle?: Flex<typeof ToggleButton>;
    };

    allToggle?: Flex<typeof ToggleButton>;
  } & Omit<
    Partial<React.ComponentProps<typeof ToggleButton>>,
    | keyof PlasmicFooter__VariantsArgs
    | keyof PlasmicFooter__ArgsType
    | "variants"
    | "args"
    | "allToggle"
  >;

PlasmicFooter.allToggle = ((props: PlasmicFooterAllToggleProps) => {
  const renderer = new PlasmicFooter__Renderer({}, {});
  const descendantNames = ["allToggle"] as const;
  const leftoverProps = omit(
    props,
    "variants",
    "args",
    "overrides",
    ...descendantNames,
    ...renderer.getInternalVariantProps(),
    ...renderer.getInternalArgProps()
  ) as Partial<React.ComponentProps<typeof ToggleButton>>;

  let nodeRenderer = renderer
    .forNode("allToggle")
    .withVariants(pick(props, ...renderer.getInternalVariantProps()))
    .withVariants(props.variants || {})
    .withArgs(pick(props, ...renderer.getInternalArgProps()))
    .withArgs(props.args || {})
    .withOverrides(pick(props, ...descendantNames))
    .withOverrides(props.overrides || {});

  if (Object.keys(leftoverProps).length > 0) {
    nodeRenderer = nodeRenderer.withOverrides({
      allToggle: {
        props: leftoverProps
      }
    });
  }

  return nodeRenderer.render();
}) as React.FunctionComponent<PlasmicFooterAllToggleProps>;

type PlasmicFooterCompletedToggleProps = PlasmicFooter__VariantsArgs &
  PlasmicFooter__ArgsType & {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: {
      completedToggle?: Flex<typeof ToggleButton>;
    };

    completedToggle?: Flex<typeof ToggleButton>;
  } & Omit<
    Partial<React.ComponentProps<typeof ToggleButton>>,
    | keyof PlasmicFooter__VariantsArgs
    | keyof PlasmicFooter__ArgsType
    | "variants"
    | "args"
    | "completedToggle"
  >;

PlasmicFooter.completedToggle = ((props: PlasmicFooterCompletedToggleProps) => {
  const renderer = new PlasmicFooter__Renderer({}, {});
  const descendantNames = ["completedToggle"] as const;
  const leftoverProps = omit(
    props,
    "variants",
    "args",
    "overrides",
    ...descendantNames,
    ...renderer.getInternalVariantProps(),
    ...renderer.getInternalArgProps()
  ) as Partial<React.ComponentProps<typeof ToggleButton>>;

  let nodeRenderer = renderer
    .forNode("completedToggle")
    .withVariants(pick(props, ...renderer.getInternalVariantProps()))
    .withVariants(props.variants || {})
    .withArgs(pick(props, ...renderer.getInternalArgProps()))
    .withArgs(props.args || {})
    .withOverrides(pick(props, ...descendantNames))
    .withOverrides(props.overrides || {});

  if (Object.keys(leftoverProps).length > 0) {
    nodeRenderer = nodeRenderer.withOverrides({
      completedToggle: {
        props: leftoverProps
      }
    });
  }

  return nodeRenderer.render();
}) as React.FunctionComponent<PlasmicFooterCompletedToggleProps>;

type PlasmicFooterActiveToggleProps = PlasmicFooter__VariantsArgs &
  PlasmicFooter__ArgsType & {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: {
      activeToggle?: Flex<typeof ToggleButton>;
    };

    activeToggle?: Flex<typeof ToggleButton>;
  } & Omit<
    Partial<React.ComponentProps<typeof ToggleButton>>,
    | keyof PlasmicFooter__VariantsArgs
    | keyof PlasmicFooter__ArgsType
    | "variants"
    | "args"
    | "activeToggle"
  >;

PlasmicFooter.activeToggle = ((props: PlasmicFooterActiveToggleProps) => {
  const renderer = new PlasmicFooter__Renderer({}, {});
  const descendantNames = ["activeToggle"] as const;
  const leftoverProps = omit(
    props,
    "variants",
    "args",
    "overrides",
    ...descendantNames,
    ...renderer.getInternalVariantProps(),
    ...renderer.getInternalArgProps()
  ) as Partial<React.ComponentProps<typeof ToggleButton>>;

  let nodeRenderer = renderer
    .forNode("activeToggle")
    .withVariants(pick(props, ...renderer.getInternalVariantProps()))
    .withVariants(props.variants || {})
    .withArgs(pick(props, ...renderer.getInternalArgProps()))
    .withArgs(props.args || {})
    .withOverrides(pick(props, ...descendantNames))
    .withOverrides(props.overrides || {});

  if (Object.keys(leftoverProps).length > 0) {
    nodeRenderer = nodeRenderer.withOverrides({
      activeToggle: {
        props: leftoverProps
      }
    });
  }

  return nodeRenderer.render();
}) as React.FunctionComponent<PlasmicFooterActiveToggleProps>;

type PlasmicFooterClearBtnProps = PlasmicFooter__VariantsArgs &
  PlasmicFooter__ArgsType & {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: {
      clearBtn?: Flex<"div">;
    };

    clearBtn?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicFooter__VariantsArgs
    | keyof PlasmicFooter__ArgsType
    | "variants"
    | "args"
    | "clearBtn"
  >;

PlasmicFooter.clearBtn = ((props: PlasmicFooterClearBtnProps) => {
  const renderer = new PlasmicFooter__Renderer({}, {});
  const descendantNames = ["clearBtn"] as const;
  const leftoverProps = omit(
    props,
    "variants",
    "args",
    "overrides",
    ...descendantNames,
    ...renderer.getInternalVariantProps(),
    ...renderer.getInternalArgProps()
  ) as Partial<React.ComponentProps<"div">>;

  let nodeRenderer = renderer
    .forNode("clearBtn")
    .withVariants(pick(props, ...renderer.getInternalVariantProps()))
    .withVariants(props.variants || {})
    .withArgs(pick(props, ...renderer.getInternalArgProps()))
    .withArgs(props.args || {})
    .withOverrides(pick(props, ...descendantNames))
    .withOverrides(props.overrides || {});

  if (Object.keys(leftoverProps).length > 0) {
    nodeRenderer = nodeRenderer.withOverrides({
      clearBtn: {
        props: leftoverProps
      }
    });
  }

  return nodeRenderer.render();
}) as React.FunctionComponent<PlasmicFooterClearBtnProps>;

PlasmicFooter.createRenderer = () => new PlasmicFooter__Renderer({}, {});

export default PlasmicFooter;
/* prettier-ignore-end */
