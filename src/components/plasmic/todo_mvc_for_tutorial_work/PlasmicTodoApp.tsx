/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4p2NHB7HnAYV45yx1ZgrVt
// Component: ELmYfayx4soyC4
import * as React from "react";
import {
  hasVariant,
  createPlasmicElement,
  RenderOpts,
  Override,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: kC6cXBS27C1bHf/component
import Task from "../../Task"; // plasmic-import: yoBg6XMOMn8SaW/component
import Footer from "../../Footer"; // plasmic-import: zjrZLDRsbEfRQV/component

import { ThemeContext, ThemeValue } from "../PlasmicGlobalVariant__Theme"; // plasmic-import: qBJztiWboOaDz9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_todo_mvc_for_tutorial_work.css"; // plasmic-import: 4p2NHB7HnAYV45yx1ZgrVt/projectcss
import "./PlasmicTodoApp.css"; // plasmic-import: ELmYfayx4soyC4/css

export type PlasmicTodoApp__VariantsArgs = {
  state?: SingleChoiceArg<"empty">;
};

export const PlasmicTodoApp__VariantProps: (keyof PlasmicTodoApp__VariantsArgs)[] = [
  "state"
];

export type PlasmicTodoApp__ArgsType = {};
export const PlasmicTodoApp__ArgProps: (keyof PlasmicTodoApp__ArgsType)[] = [];

export interface DefaultTodoAppProps {
  state?: SingleChoiceArg<"empty">;
  className?: string;
}

const PlasmicTodoApp__RenderFuncs = {
  root: (
    opts: RenderOpts<
      PlasmicTodoApp__VariantsArgs,
      PlasmicTodoApp__ArgsType,
      {
        root?: Flex<"div">;
        appTitle?: Flex<"div">;
        appBody?: Flex<"div">;
        header?: Flex<typeof Header>;
        tasksContainer?: Flex<"div">;
        footer?: Flex<typeof Footer>;
        fakeStack?: Flex<"div">;
      }
    >
  ): React.ReactElement | null => {
    return <PlasmicTodoApp__FCs.root opts={opts} />;
  },
  appTitle: (
    opts: RenderOpts<
      PlasmicTodoApp__VariantsArgs,
      PlasmicTodoApp__ArgsType,
      {
        appTitle?: Flex<"div">;
      }
    >
  ): React.ReactElement | null => {
    return <PlasmicTodoApp__FCs.appTitle opts={opts} />;
  },
  appBody: (
    opts: RenderOpts<
      PlasmicTodoApp__VariantsArgs,
      PlasmicTodoApp__ArgsType,
      {
        appBody?: Flex<"div">;
        header?: Flex<typeof Header>;
        tasksContainer?: Flex<"div">;
        footer?: Flex<typeof Footer>;
      }
    >
  ): React.ReactElement | null => {
    return <PlasmicTodoApp__FCs.appBody opts={opts} />;
  },
  header: (
    opts: RenderOpts<
      PlasmicTodoApp__VariantsArgs,
      PlasmicTodoApp__ArgsType,
      {
        header?: Flex<typeof Header>;
      }
    >
  ): React.ReactElement | null => {
    return <PlasmicTodoApp__FCs.header opts={opts} />;
  },
  tasksContainer: (
    opts: RenderOpts<
      PlasmicTodoApp__VariantsArgs,
      PlasmicTodoApp__ArgsType,
      {
        tasksContainer?: Flex<"div">;
      }
    >
  ): React.ReactElement | null => {
    return <PlasmicTodoApp__FCs.tasksContainer opts={opts} />;
  },
  footer: (
    opts: RenderOpts<
      PlasmicTodoApp__VariantsArgs,
      PlasmicTodoApp__ArgsType,
      {
        footer?: Flex<typeof Footer>;
      }
    >
  ): React.ReactElement | null => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (hasVariant(variants, "state", "empty") ? false : true) ? (
      <Footer
        data-plasmic-override={overrides.footer}
        className={classNames({
          "TodoApp__footer--empty__VmtC2PBo-R": hasVariant(
            variants,
            "state",
            "empty"
          ),

          TodoApp__footer__VmtC2: true,
          __wab_instance: true
        })}
        count={"2"}
        state={["hasCompleted"]}
        {...({} as any)}
      ></Footer>
    ) : null;
  },
  fakeStack: (
    opts: RenderOpts<
      PlasmicTodoApp__VariantsArgs,
      PlasmicTodoApp__ArgsType,
      {
        fakeStack?: Flex<"div">;
      }
    >
  ): React.ReactElement | null => {
    return <PlasmicTodoApp__FCs.fakeStack opts={opts} />;
  }
};

const PlasmicTodoApp__FCs = {
  root: ((props: {
    opts: Parameters<typeof PlasmicTodoApp__RenderFuncs["root"]>[0];
  }) => {
    const { opts } = props;
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};

    const globalVariants = {
      theme: React.useContext(ThemeContext)
    };

    return (
      <div
        data-plasmic-override={overrides.root}
        className={classNames({
          "TodoApp__root--baseDark__9S0VOs7HIs_6DHL0":
            true && hasVariant(globalVariants, "theme", "dark"),
          "TodoApp__root--empty__9S0VOPBo-R": hasVariant(
            variants,
            "state",
            "empty"
          ),

          TodoApp__root__9S0VO: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        {PlasmicTodoApp__RenderFuncs.appTitle({
          variants,
          args,
          overrides
        })}

        <div
          className={classNames({
            "TodoApp__box--baseDark__MFqfgs7HIs_6DHL0":
              true && hasVariant(globalVariants, "theme", "dark"),
            TodoApp__box__MFqfg: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        >
          {PlasmicTodoApp__RenderFuncs.appBody({
            variants,
            args,
            overrides
          })}

          {PlasmicTodoApp__RenderFuncs.fakeStack({
            variants,
            args,
            overrides
          })}
        </div>
      </div>
    ) as React.ReactElement;
  }) as React.FunctionComponent<{
    opts: Parameters<typeof PlasmicTodoApp__RenderFuncs["root"]>[0];
  }>,

  appTitle: ((props: {
    opts: Parameters<typeof PlasmicTodoApp__RenderFuncs["appTitle"]>[0];
  }) => {
    const { opts } = props;
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};

    const globalVariants = {
      theme: React.useContext(ThemeContext)
    };

    return (
      <div
        data-plasmic-override={overrides.appTitle}
        className={classNames({
          "TodoApp__appTitle--baseDark__sRwhrs7HIs_6DHL0":
            true && hasVariant(globalVariants, "theme", "dark"),
          TodoApp__appTitle__sRwhr: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        {"todos"}
      </div>
    ) as React.ReactElement;
  }) as React.FunctionComponent<{
    opts: Parameters<typeof PlasmicTodoApp__RenderFuncs["appTitle"]>[0];
  }>,

  appBody: ((props: {
    opts: Parameters<typeof PlasmicTodoApp__RenderFuncs["appBody"]>[0];
  }) => {
    const { opts } = props;
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};

    const globalVariants = {
      theme: React.useContext(ThemeContext)
    };

    return (
      <div
        data-plasmic-override={overrides.appBody}
        className={classNames({
          "TodoApp__appBody--baseDark__rdG0as7HIs_6DHL0":
            true && hasVariant(globalVariants, "theme", "dark"),
          TodoApp__appBody__rdG0a: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        {PlasmicTodoApp__RenderFuncs.header({
          variants,
          args,
          overrides
        })}

        {PlasmicTodoApp__RenderFuncs.tasksContainer({
          variants,
          args,
          overrides
        })}

        {PlasmicTodoApp__RenderFuncs.footer({
          variants,
          args,
          overrides
        })}
      </div>
    ) as React.ReactElement;
  }) as React.FunctionComponent<{
    opts: Parameters<typeof PlasmicTodoApp__RenderFuncs["appBody"]>[0];
  }>,

  header: ((props: {
    opts: Parameters<typeof PlasmicTodoApp__RenderFuncs["header"]>[0];
  }) => {
    const { opts } = props;
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};

    const globalVariants = {
      theme: React.useContext(ThemeContext)
    };

    return (
      <Header
        data-plasmic-override={overrides.header}
        className={classNames({
          "TodoApp__header--baseDark__aoS9Bs7HIs_6DHL0":
            true && hasVariant(globalVariants, "theme", "dark"),
          "TodoApp__header--empty__aoS9BPBo-R": hasVariant(
            variants,
            "state",
            "empty"
          ),

          TodoApp__header__aoS9B: true,
          __wab_instance: true
        })}
        state={
          hasVariant(variants, "state", "empty")
            ? ("empty" as const)
            : undefined
        }
        {...({} as any)}
      ></Header>
    ) as React.ReactElement;
  }) as React.FunctionComponent<{
    opts: Parameters<typeof PlasmicTodoApp__RenderFuncs["header"]>[0];
  }>,

  tasksContainer: ((props: {
    opts: Parameters<typeof PlasmicTodoApp__RenderFuncs["tasksContainer"]>[0];
  }) => {
    const { opts } = props;
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};

    const globalVariants = {
      theme: React.useContext(ThemeContext)
    };

    return ((hasVariant(variants, "state", "empty") ? false : true) ? (
      <div
        data-plasmic-override={overrides.tasksContainer}
        className={classNames({
          "TodoApp__tasksContainer--empty__Wbht5PBo-R": hasVariant(
            variants,
            "state",
            "empty"
          ),

          TodoApp__tasksContainer__Wbht5: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        <Task
          className={classNames({
            "TodoApp__task--baseDark__pe_z9s7HIs_6DHL0":
              true && hasVariant(globalVariants, "theme", "dark"),
            "TodoApp__task--empty__pe_z9PBo-R": hasVariant(
              variants,
              "state",
              "empty"
            ),

            TodoApp__task__pe_z9: true,
            __wab_instance: true
          })}
          {...({} as any)}
        >
          {"Some kind of text here"}
        </Task>

        <Task
          className={classNames({
            "TodoApp__task--baseDark__jX3_2s7HIs_6DHL0":
              true && hasVariant(globalVariants, "theme", "dark"),
            TodoApp__task__jX3_2: true,
            __wab_instance: true
          })}
          state={"editing" as const}
          {...({} as any)}
        >
          {"Some kind of text here"}
        </Task>

        <Task
          className={classNames({
            TodoApp__task__rO4au: true,
            __wab_instance: true
          })}
          state={"checked" as const}
          {...({} as any)}
        >
          {"Some kind of text here"}
        </Task>

        <Task
          className={classNames({
            TodoApp__task__pxp7d: true,
            __wab_instance: true
          })}
          {...({} as any)}
        >
          {"I have a task to do something that takes a long time"}
        </Task>
      </div>
    ) : null) as React.ReactElement;
  }) as React.FunctionComponent<{
    opts: Parameters<typeof PlasmicTodoApp__RenderFuncs["tasksContainer"]>[0];
  }>,

  footer: undefined,
  fakeStack: ((props: {
    opts: Parameters<typeof PlasmicTodoApp__RenderFuncs["fakeStack"]>[0];
  }) => {
    const { opts } = props;
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};

    const globalVariants = {
      theme: React.useContext(ThemeContext)
    };

    return ((hasVariant(variants, "state", "empty") ? false : true) ? (
      <div
        data-plasmic-override={overrides.fakeStack}
        className={classNames({
          "TodoApp__fakeStack--empty__C7jdQPBo-R": hasVariant(
            variants,
            "state",
            "empty"
          ),

          TodoApp__fakeStack__C7jdQ: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        <div
          className={classNames({
            "TodoApp__box--baseDark__zsg94s7HIs_6DHL0":
              true && hasVariant(globalVariants, "theme", "dark"),
            TodoApp__box__zsg94: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        ></div>

        <div
          className={classNames({
            "TodoApp__box--baseDark__Yygixs7HIs_6DHL0":
              true && hasVariant(globalVariants, "theme", "dark"),
            TodoApp__box__Yygix: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        ></div>
      </div>
    ) : null) as React.ReactElement;
  }) as React.FunctionComponent<{
    opts: Parameters<typeof PlasmicTodoApp__RenderFuncs["fakeStack"]>[0];
  }>
};

class PlasmicTodoApp__Renderer extends Renderer<
  PlasmicTodoApp__VariantsArgs,
  PlasmicTodoApp__ArgsType,
  typeof PlasmicTodoApp__RenderFuncs,
  "root"
> {
  constructor(
    variants: PlasmicTodoApp__VariantsArgs,
    args: PlasmicTodoApp__ArgsType
  ) {
    super(variants, args, PlasmicTodoApp__RenderFuncs, "root");
  }

  protected create(
    variants: PlasmicTodoApp__VariantsArgs,
    args: PlasmicTodoApp__ArgsType
  ) {
    return new PlasmicTodoApp__Renderer(variants, args);
  }

  getInternalVariantProps(): (keyof PlasmicTodoApp__VariantsArgs)[] {
    return PlasmicTodoApp__VariantProps;
  }

  getInternalArgProps(): (keyof PlasmicTodoApp__ArgsType)[] {
    return PlasmicTodoApp__ArgProps;
  }

  forNode(
    name: "root"
  ): NodeRenderer<typeof PlasmicTodoApp__RenderFuncs["root"]>;
  forNode(
    name: "appTitle"
  ): NodeRenderer<typeof PlasmicTodoApp__RenderFuncs["appTitle"]>;
  forNode(
    name: "appBody"
  ): NodeRenderer<typeof PlasmicTodoApp__RenderFuncs["appBody"]>;
  forNode(
    name: "header"
  ): NodeRenderer<typeof PlasmicTodoApp__RenderFuncs["header"]>;
  forNode(
    name: "tasksContainer"
  ): NodeRenderer<typeof PlasmicTodoApp__RenderFuncs["tasksContainer"]>;
  forNode(
    name: "footer"
  ): NodeRenderer<typeof PlasmicTodoApp__RenderFuncs["footer"]>;
  forNode(
    name: "fakeStack"
  ): NodeRenderer<typeof PlasmicTodoApp__RenderFuncs["fakeStack"]>;
  forNode(name: keyof typeof PlasmicTodoApp__RenderFuncs) {
    return super.forNode(name);
  }
}

type PlasmicTodoAppRootProps = PlasmicTodoApp__VariantsArgs &
  PlasmicTodoApp__ArgsType & {
    variants?: PlasmicTodoApp__VariantsArgs;
    args?: PlasmicTodoApp__ArgsType;
    overrides?: {
      root?: Flex<"div">;
      appTitle?: Flex<"div">;
      appBody?: Flex<"div">;
      header?: Flex<typeof Header>;
      tasksContainer?: Flex<"div">;
      footer?: Flex<typeof Footer>;
      fakeStack?: Flex<"div">;
    };

    root?: Flex<"div">;
    appTitle?: Flex<"div">;
    appBody?: Flex<"div">;
    header?: Flex<typeof Header>;
    tasksContainer?: Flex<"div">;
    footer?: Flex<typeof Footer>;
    fakeStack?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicTodoApp__VariantsArgs
    | keyof PlasmicTodoApp__ArgsType
    | "variants"
    | "args"
    | "root"
    | "appTitle"
    | "appBody"
    | "header"
    | "tasksContainer"
    | "footer"
    | "fakeStack"
  >;

export const PlasmicTodoApp = ((props: PlasmicTodoAppRootProps) => {
  const renderer = new PlasmicTodoApp__Renderer({}, {});
  const descendantNames = [
    "root",
    "appTitle",
    "appBody",
    "header",
    "tasksContainer",
    "footer",
    "fakeStack"
  ] as const;
  const leftoverProps = omit(
    props,
    "variants",
    "args",
    "overrides",
    ...descendantNames,
    ...renderer.getInternalVariantProps(),
    ...renderer.getInternalArgProps()
  ) as Partial<React.ComponentProps<"div">>;

  let nodeRenderer = renderer
    .forNode("root")
    .withVariants(pick(props, ...renderer.getInternalVariantProps()))
    .withVariants(props.variants || {})
    .withArgs(pick(props, ...renderer.getInternalArgProps()))
    .withArgs(props.args || {})
    .withOverrides(pick(props, ...descendantNames))
    .withOverrides(props.overrides || {});

  if (Object.keys(leftoverProps).length > 0) {
    nodeRenderer = nodeRenderer.withOverrides({
      root: {
        props: leftoverProps
      }
    });
  }

  return nodeRenderer.render();
}) as React.FunctionComponent<PlasmicTodoAppRootProps> & {
  appTitle: React.FunctionComponent<PlasmicTodoAppAppTitleProps>;
  appBody: React.FunctionComponent<PlasmicTodoAppAppBodyProps>;
  header: React.FunctionComponent<PlasmicTodoAppHeaderProps>;
  tasksContainer: React.FunctionComponent<PlasmicTodoAppTasksContainerProps>;
  footer: React.FunctionComponent<PlasmicTodoAppFooterProps>;
  fakeStack: React.FunctionComponent<PlasmicTodoAppFakeStackProps>;
  createRenderer: () => PlasmicTodoApp__Renderer;
};

type PlasmicTodoAppAppTitleProps = PlasmicTodoApp__VariantsArgs &
  PlasmicTodoApp__ArgsType & {
    variants?: PlasmicTodoApp__VariantsArgs;
    args?: PlasmicTodoApp__ArgsType;
    overrides?: {
      appTitle?: Flex<"div">;
    };

    appTitle?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicTodoApp__VariantsArgs
    | keyof PlasmicTodoApp__ArgsType
    | "variants"
    | "args"
    | "appTitle"
  >;

PlasmicTodoApp.appTitle = ((props: PlasmicTodoAppAppTitleProps) => {
  const renderer = new PlasmicTodoApp__Renderer({}, {});
  const descendantNames = ["appTitle"] as const;
  const leftoverProps = omit(
    props,
    "variants",
    "args",
    "overrides",
    ...descendantNames,
    ...renderer.getInternalVariantProps(),
    ...renderer.getInternalArgProps()
  ) as Partial<React.ComponentProps<"div">>;

  let nodeRenderer = renderer
    .forNode("appTitle")
    .withVariants(pick(props, ...renderer.getInternalVariantProps()))
    .withVariants(props.variants || {})
    .withArgs(pick(props, ...renderer.getInternalArgProps()))
    .withArgs(props.args || {})
    .withOverrides(pick(props, ...descendantNames))
    .withOverrides(props.overrides || {});

  if (Object.keys(leftoverProps).length > 0) {
    nodeRenderer = nodeRenderer.withOverrides({
      appTitle: {
        props: leftoverProps
      }
    });
  }

  return nodeRenderer.render();
}) as React.FunctionComponent<PlasmicTodoAppAppTitleProps>;

type PlasmicTodoAppAppBodyProps = PlasmicTodoApp__VariantsArgs &
  PlasmicTodoApp__ArgsType & {
    variants?: PlasmicTodoApp__VariantsArgs;
    args?: PlasmicTodoApp__ArgsType;
    overrides?: {
      appBody?: Flex<"div">;
      header?: Flex<typeof Header>;
      tasksContainer?: Flex<"div">;
      footer?: Flex<typeof Footer>;
    };

    appBody?: Flex<"div">;
    header?: Flex<typeof Header>;
    tasksContainer?: Flex<"div">;
    footer?: Flex<typeof Footer>;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicTodoApp__VariantsArgs
    | keyof PlasmicTodoApp__ArgsType
    | "variants"
    | "args"
    | "appBody"
    | "header"
    | "tasksContainer"
    | "footer"
  >;

PlasmicTodoApp.appBody = ((props: PlasmicTodoAppAppBodyProps) => {
  const renderer = new PlasmicTodoApp__Renderer({}, {});
  const descendantNames = [
    "appBody",
    "header",
    "tasksContainer",
    "footer"
  ] as const;
  const leftoverProps = omit(
    props,
    "variants",
    "args",
    "overrides",
    ...descendantNames,
    ...renderer.getInternalVariantProps(),
    ...renderer.getInternalArgProps()
  ) as Partial<React.ComponentProps<"div">>;

  let nodeRenderer = renderer
    .forNode("appBody")
    .withVariants(pick(props, ...renderer.getInternalVariantProps()))
    .withVariants(props.variants || {})
    .withArgs(pick(props, ...renderer.getInternalArgProps()))
    .withArgs(props.args || {})
    .withOverrides(pick(props, ...descendantNames))
    .withOverrides(props.overrides || {});

  if (Object.keys(leftoverProps).length > 0) {
    nodeRenderer = nodeRenderer.withOverrides({
      appBody: {
        props: leftoverProps
      }
    });
  }

  return nodeRenderer.render();
}) as React.FunctionComponent<PlasmicTodoAppAppBodyProps>;

type PlasmicTodoAppHeaderProps = PlasmicTodoApp__VariantsArgs &
  PlasmicTodoApp__ArgsType & {
    variants?: PlasmicTodoApp__VariantsArgs;
    args?: PlasmicTodoApp__ArgsType;
    overrides?: {
      header?: Flex<typeof Header>;
    };

    header?: Flex<typeof Header>;
  } & Omit<
    Partial<React.ComponentProps<typeof Header>>,
    | keyof PlasmicTodoApp__VariantsArgs
    | keyof PlasmicTodoApp__ArgsType
    | "variants"
    | "args"
    | "header"
  >;

PlasmicTodoApp.header = ((props: PlasmicTodoAppHeaderProps) => {
  const renderer = new PlasmicTodoApp__Renderer({}, {});
  const descendantNames = ["header"] as const;
  const leftoverProps = omit(
    props,
    "variants",
    "args",
    "overrides",
    ...descendantNames,
    ...renderer.getInternalVariantProps(),
    ...renderer.getInternalArgProps()
  ) as Partial<React.ComponentProps<typeof Header>>;

  let nodeRenderer = renderer
    .forNode("header")
    .withVariants(pick(props, ...renderer.getInternalVariantProps()))
    .withVariants(props.variants || {})
    .withArgs(pick(props, ...renderer.getInternalArgProps()))
    .withArgs(props.args || {})
    .withOverrides(pick(props, ...descendantNames))
    .withOverrides(props.overrides || {});

  if (Object.keys(leftoverProps).length > 0) {
    nodeRenderer = nodeRenderer.withOverrides({
      header: {
        props: leftoverProps
      }
    });
  }

  return nodeRenderer.render();
}) as React.FunctionComponent<PlasmicTodoAppHeaderProps>;

type PlasmicTodoAppTasksContainerProps = PlasmicTodoApp__VariantsArgs &
  PlasmicTodoApp__ArgsType & {
    variants?: PlasmicTodoApp__VariantsArgs;
    args?: PlasmicTodoApp__ArgsType;
    overrides?: {
      tasksContainer?: Flex<"div">;
    };

    tasksContainer?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicTodoApp__VariantsArgs
    | keyof PlasmicTodoApp__ArgsType
    | "variants"
    | "args"
    | "tasksContainer"
  >;

PlasmicTodoApp.tasksContainer = ((props: PlasmicTodoAppTasksContainerProps) => {
  const renderer = new PlasmicTodoApp__Renderer({}, {});
  const descendantNames = ["tasksContainer"] as const;
  const leftoverProps = omit(
    props,
    "variants",
    "args",
    "overrides",
    ...descendantNames,
    ...renderer.getInternalVariantProps(),
    ...renderer.getInternalArgProps()
  ) as Partial<React.ComponentProps<"div">>;

  let nodeRenderer = renderer
    .forNode("tasksContainer")
    .withVariants(pick(props, ...renderer.getInternalVariantProps()))
    .withVariants(props.variants || {})
    .withArgs(pick(props, ...renderer.getInternalArgProps()))
    .withArgs(props.args || {})
    .withOverrides(pick(props, ...descendantNames))
    .withOverrides(props.overrides || {});

  if (Object.keys(leftoverProps).length > 0) {
    nodeRenderer = nodeRenderer.withOverrides({
      tasksContainer: {
        props: leftoverProps
      }
    });
  }

  return nodeRenderer.render();
}) as React.FunctionComponent<PlasmicTodoAppTasksContainerProps>;

type PlasmicTodoAppFooterProps = PlasmicTodoApp__VariantsArgs &
  PlasmicTodoApp__ArgsType & {
    variants?: PlasmicTodoApp__VariantsArgs;
    args?: PlasmicTodoApp__ArgsType;
    overrides?: {
      footer?: Flex<typeof Footer>;
    };

    footer?: Flex<typeof Footer>;
  } & Omit<
    Partial<React.ComponentProps<typeof Footer>>,
    | keyof PlasmicTodoApp__VariantsArgs
    | keyof PlasmicTodoApp__ArgsType
    | "variants"
    | "args"
    | "footer"
  >;

PlasmicTodoApp.footer = ((props: PlasmicTodoAppFooterProps) => {
  const renderer = new PlasmicTodoApp__Renderer({}, {});
  const descendantNames = ["footer"] as const;
  const leftoverProps = omit(
    props,
    "variants",
    "args",
    "overrides",
    ...descendantNames,
    ...renderer.getInternalVariantProps(),
    ...renderer.getInternalArgProps()
  ) as Partial<React.ComponentProps<typeof Footer>>;

  let nodeRenderer = renderer
    .forNode("footer")
    .withVariants(pick(props, ...renderer.getInternalVariantProps()))
    .withVariants(props.variants || {})
    .withArgs(pick(props, ...renderer.getInternalArgProps()))
    .withArgs(props.args || {})
    .withOverrides(pick(props, ...descendantNames))
    .withOverrides(props.overrides || {});

  if (Object.keys(leftoverProps).length > 0) {
    nodeRenderer = nodeRenderer.withOverrides({
      footer: {
        props: leftoverProps
      }
    });
  }

  return nodeRenderer.render();
}) as React.FunctionComponent<PlasmicTodoAppFooterProps>;

type PlasmicTodoAppFakeStackProps = PlasmicTodoApp__VariantsArgs &
  PlasmicTodoApp__ArgsType & {
    variants?: PlasmicTodoApp__VariantsArgs;
    args?: PlasmicTodoApp__ArgsType;
    overrides?: {
      fakeStack?: Flex<"div">;
    };

    fakeStack?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicTodoApp__VariantsArgs
    | keyof PlasmicTodoApp__ArgsType
    | "variants"
    | "args"
    | "fakeStack"
  >;

PlasmicTodoApp.fakeStack = ((props: PlasmicTodoAppFakeStackProps) => {
  const renderer = new PlasmicTodoApp__Renderer({}, {});
  const descendantNames = ["fakeStack"] as const;
  const leftoverProps = omit(
    props,
    "variants",
    "args",
    "overrides",
    ...descendantNames,
    ...renderer.getInternalVariantProps(),
    ...renderer.getInternalArgProps()
  ) as Partial<React.ComponentProps<"div">>;

  let nodeRenderer = renderer
    .forNode("fakeStack")
    .withVariants(pick(props, ...renderer.getInternalVariantProps()))
    .withVariants(props.variants || {})
    .withArgs(pick(props, ...renderer.getInternalArgProps()))
    .withArgs(props.args || {})
    .withOverrides(pick(props, ...descendantNames))
    .withOverrides(props.overrides || {});

  if (Object.keys(leftoverProps).length > 0) {
    nodeRenderer = nodeRenderer.withOverrides({
      fakeStack: {
        props: leftoverProps
      }
    });
  }

  return nodeRenderer.render();
}) as React.FunctionComponent<PlasmicTodoAppFakeStackProps>;

PlasmicTodoApp.createRenderer = () => new PlasmicTodoApp__Renderer({}, {});

export default PlasmicTodoApp;
/* prettier-ignore-end */
