/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4p2NHB7HnAYV45yx1ZgrVt
// Component: GYBhl6_6fdZANy
import * as React from "react";
import {
  hasVariant,
  createPlasmicElement,
  RenderOpts,
  Override,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_todo_mvc_for_tutorial_work.css"; // plasmic-import: 4p2NHB7HnAYV45yx1ZgrVt/projectcss
import "./PlasmicToggleButton.css"; // plasmic-import: GYBhl6_6fdZANy/css

export type PlasmicToggleButton__VariantsArgs = {
  state?: SingleChoiceArg<"selected">;
};

export const PlasmicToggleButton__VariantProps: (keyof PlasmicToggleButton__VariantsArgs)[] = [
  "state"
];

export type PlasmicToggleButton__ArgsType = {
  children?: React.ReactNode;
};

export const PlasmicToggleButton__ArgProps: (keyof PlasmicToggleButton__ArgsType)[] = [
  "children"
];

export interface DefaultToggleButtonProps {
  children?: React.ReactNode;
  state?: SingleChoiceArg<"selected">;
  className?: string;
}

const PlasmicToggleButton__RenderFuncs = {
  root: (
    opts: RenderOpts<
      PlasmicToggleButton__VariantsArgs,
      PlasmicToggleButton__ArgsType,
      {
        root?: Flex<"div">;
      }
    >
  ): React.ReactElement | null => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <div
        data-plasmic-override={overrides.root}
        className={classNames({
          "ToggleButton__root--selected__bGSqeTGWrW": hasVariant(
            variants,
            "state",
            "selected"
          ),

          ToggleButton__root__bGSqe: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        {PlasmicToggleButton__RenderFuncs.slotChildren({
          variants,
          args,
          overrides
        })}
      </div>
    );
  },
  slotChildren: (
    opts: RenderOpts<
      PlasmicToggleButton__VariantsArgs,
      PlasmicToggleButton__ArgsType,
      {}
    >
  ): React.ReactElement | null => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <PlasmicSlot
        defaultContents={"All"}
        value={args.children}
        className={classNames({
          "ToggleButton__slotChildren--selected__pgeHsTGWrW": hasVariant(
            variants,
            "state",
            "selected"
          ),

          ToggleButton__slotChildren__pgeHs: true
        })}
      />
    );
  }
};

const PlasmicToggleButton__FCs = {
  root: undefined,
  slotChildren: undefined
};

class PlasmicToggleButton__Renderer extends Renderer<
  PlasmicToggleButton__VariantsArgs,
  PlasmicToggleButton__ArgsType,
  typeof PlasmicToggleButton__RenderFuncs,
  "root"
> {
  constructor(
    variants: PlasmicToggleButton__VariantsArgs,
    args: PlasmicToggleButton__ArgsType
  ) {
    super(variants, args, PlasmicToggleButton__RenderFuncs, "root");
  }

  protected create(
    variants: PlasmicToggleButton__VariantsArgs,
    args: PlasmicToggleButton__ArgsType
  ) {
    return new PlasmicToggleButton__Renderer(variants, args);
  }

  getInternalVariantProps(): (keyof PlasmicToggleButton__VariantsArgs)[] {
    return PlasmicToggleButton__VariantProps;
  }

  getInternalArgProps(): (keyof PlasmicToggleButton__ArgsType)[] {
    return PlasmicToggleButton__ArgProps;
  }

  forNode(
    name: "root"
  ): NodeRenderer<typeof PlasmicToggleButton__RenderFuncs["root"]>;
  forNode(
    name: "slotChildren"
  ): NodeRenderer<typeof PlasmicToggleButton__RenderFuncs["slotChildren"]>;
  forNode(name: keyof typeof PlasmicToggleButton__RenderFuncs) {
    return super.forNode(name);
  }
}

type PlasmicToggleButtonRootProps = PlasmicToggleButton__VariantsArgs &
  PlasmicToggleButton__ArgsType & {
    variants?: PlasmicToggleButton__VariantsArgs;
    args?: PlasmicToggleButton__ArgsType;
    overrides?: {
      root?: Flex<"div">;
    };

    root?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicToggleButton__VariantsArgs
    | keyof PlasmicToggleButton__ArgsType
    | "variants"
    | "args"
    | "root"
  >;

export const PlasmicToggleButton = ((props: PlasmicToggleButtonRootProps) => {
  const renderer = new PlasmicToggleButton__Renderer({}, {});
  const descendantNames = ["root"] as const;
  const leftoverProps = omit(
    props,
    "variants",
    "args",
    "overrides",
    ...descendantNames,
    ...renderer.getInternalVariantProps(),
    ...renderer.getInternalArgProps()
  ) as Partial<React.ComponentProps<"div">>;

  let nodeRenderer = renderer
    .forNode("root")
    .withVariants(pick(props, ...renderer.getInternalVariantProps()))
    .withVariants(props.variants || {})
    .withArgs(pick(props, ...renderer.getInternalArgProps()))
    .withArgs(props.args || {})
    .withOverrides(pick(props, ...descendantNames))
    .withOverrides(props.overrides || {});

  if (Object.keys(leftoverProps).length > 0) {
    nodeRenderer = nodeRenderer.withOverrides({
      root: {
        props: leftoverProps
      }
    });
  }

  return nodeRenderer.render();
}) as React.FunctionComponent<PlasmicToggleButtonRootProps> & {
  createRenderer: () => PlasmicToggleButton__Renderer;
};

PlasmicToggleButton.createRenderer = () =>
  new PlasmicToggleButton__Renderer({}, {});

export default PlasmicToggleButton;
/* prettier-ignore-end */
